{"ast":null,"code":"import _toConsumableArray from \"/Users/prasadedlabadkar/Desktop/code/org-chart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/prasadedlabadkar/Desktop/code/org-chart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/prasadedlabadkar/Desktop/code/org-chart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { selection, select } from \"d3-selection\";\nimport { max, min, sum, cumsum } from \"d3-array\";\nimport { tree, stratify } from \"d3-hierarchy\";\nimport { zoom, zoomIdentity } from \"d3-zoom\";\nimport { flextree } from 'd3-flextree';\nimport { linkHorizontal } from 'd3-shape';\nvar d3 = {\n  selection: selection,\n  select: select,\n  max: max,\n  min: min,\n  sum: sum,\n  cumsum: cumsum,\n  tree: tree,\n  stratify: stratify,\n  zoom: zoom,\n  zoomIdentity: zoomIdentity,\n  linkHorizontal: linkHorizontal\n};\nexport var OrgChart = /*#__PURE__*/function () {\n  function OrgChart() {\n    var _this2 = this;\n    _classCallCheck(this, OrgChart);\n    // Exposed variables \n    var attrs = {\n      id: \"ID\".concat(Math.floor(Math.random() * 1000000)),\n      // Id for event handlings\n      firstDraw: true,\n      svgWidth: 800,\n      svgHeight: window.innerHeight - 100,\n      scaleExtent: [0.001, 20],\n      container: \"body\",\n      defaultTextFill: \"#2C3E50\",\n      defaultFont: \"Helvetica\",\n      ctx: document.createElement('canvas').getContext('2d'),\n      data: null,\n      duration: 400,\n      setActiveNodeCentered: true,\n      expandLevel: 1,\n      compact: true,\n      rootMargin: 40,\n      nodeDefaultBackground: 'none',\n      connections: [],\n      lastTransform: {\n        x: 0,\n        y: 0,\n        k: 1\n      },\n      nodeId: function nodeId(d) {\n        return d.nodeId || d.id;\n      },\n      parentNodeId: function parentNodeId(d) {\n        return d.parentNodeId || d.parentId;\n      },\n      backgroundColor: 'none',\n      zoomBehavior: null,\n      defs: function defs(state, visibleConnections) {\n        var _this = this;\n        return \"<defs>\\n                    \".concat(visibleConnections.map(function (conn) {\n          var labelWidth = _this.getTextWidth(conn.label, {\n            ctx: state.ctx,\n            fontSize: 2,\n            defaultFont: state.defaultFont\n          });\n          return \"\\n                       <marker id=\\\"\".concat(conn.from + \"_\" + conn.to, \"\\\" refX=\\\"\").concat(conn._source.x < conn._target.x ? -7 : 7, \"\\\" refY=\\\"5\\\" markerWidth=\\\"500\\\"  markerHeight=\\\"500\\\"  orient=\\\"\").concat(conn._source.x < conn._target.x ? \"auto\" : \"auto-start-reverse\", \"\\\" >\\n                       <rect rx=0.5 width=\").concat(conn.label ? labelWidth + 3 : 0, \" height=3 y=1  fill=\\\"#152785\\\"></rect>\\n                       <text font-size=\\\"2px\\\" x=1 fill=\\\"white\\\" y=3>\").concat(conn.label || '', \"</text>\\n                       </marker>\\n\\n                       <marker id=\\\"arrow-\").concat(conn.from + \"_\" + conn.to, \"\\\"  markerWidth=\\\"500\\\"  markerHeight=\\\"500\\\"  refY=\\\"2\\\"  refX=\\\"1\\\" orient=\\\"\").concat(conn._source.x < conn._target.x ? \"auto\" : \"auto-start-reverse\", \"\\\" >\\n                       <path transform=\\\"translate(0)\\\" d='M0,0 V4 L2,2 Z' fill='#152785' />\\n                       </marker>\\n                    \");\n        }).join(\"\"), \"\\n                    </defs>\\n                    \");\n      },\n      connectionsUpdate: function connectionsUpdate(d, i, arr) {\n        d3.select(this).attr(\"stroke\", function (d) {\n          return '#152785';\n        }).attr('stroke-linecap', 'round').attr(\"stroke-width\", function (d) {\n          return '5';\n        }).attr('pointer-events', 'none').attr(\"marker-start\", function (d) {\n          return \"url(#\".concat(d.from + \"_\" + d.to, \")\");\n        }).attr(\"marker-end\", function (d) {\n          return \"url(#arrow-\".concat(d.from + \"_\" + d.to, \")\");\n        });\n      },\n      linkUpdate: function linkUpdate(d, i, arr) {\n        d3.select(this).attr(\"stroke\", function (d) {\n          return d.data._upToTheRootHighlighted ? '#152785' : 'lightgray';\n        }).attr(\"stroke-width\", function (d) {\n          return d.data._upToTheRootHighlighted ? 5 : 2;\n        });\n        if (d.data._upToTheRootHighlighted) {\n          d3.select(this).raise();\n        }\n      },\n      nodeUpdate: function nodeUpdate(d, i, arr) {\n        d3.select(this).select('.node-rect').attr(\"stroke\", function (d) {\n          return d.data._highlighted || d.data._upToTheRootHighlighted ? '#152785' : 'none';\n        }).attr(\"stroke-width\", d.data._highlighted || d.data._upToTheRootHighlighted ? 10 : 1);\n      },\n      nodeWidth: function nodeWidth(d3Node) {\n        return 250;\n      },\n      nodeHeight: function nodeHeight(d) {\n        return 150;\n      },\n      siblingsMargin: function siblingsMargin(d3Node) {\n        return 20;\n      },\n      childrenMargin: function childrenMargin(d) {\n        return 60;\n      },\n      neightbourMargin: function neightbourMargin(n1, n2) {\n        return 80;\n      },\n      compactMarginPair: function compactMarginPair(d) {\n        return 100;\n      },\n      compactMarginBetween: function compactMarginBetween(d3Node) {\n        return 20;\n      },\n      onNodeClick: function onNodeClick(d) {\n        return d;\n      },\n      linkGroupArc: d3.linkHorizontal().x(function (d) {\n        return d.x;\n      }).y(function (d) {\n        return d.y;\n      }),\n      // ({ source, target }) => {\n      //     return \n      //     return `M ${source.x} , ${source.y} Q ${(source.x + target.x) / 2 + 100},${source.y-100}  ${target.x}, ${target.y}`;\n      // },\n      nodeContent: function nodeContent(d) {\n        return \"<div style=\\\"padding:5px;font-size:10px;\\\">Sample Node(id=\".concat(d.id, \"), override using <br/> <br/> \\n            <code>chart<br/>\\n            &nbsp;.nodeContent({data}=>{ <br/>\\n             &nbsp;&nbsp;&nbsp;&nbsp;return '' // Custom HTML <br/>\\n             &nbsp;})</code>\\n             <br/> <br/>\\n             Or check different <a href=\\\"https://github.com/bumbeishvili/org-chart#jump-to-examples\\\" target=\\\"_blank\\\">layout examples</a>\\n             \\n             </div>\");\n      },\n      layout: \"top\",\n      // top, left,right, bottom\n      buttonContent: function buttonContent(_ref) {\n        var node = _ref.node,\n          state = _ref.state;\n        var icons = {\n          \"left\": function left(d) {\n            return d ? \"<div style=\\\"margin-top:-10px;line-height:1.2;font-size:25px;height:22px\\\">\\u2039</div>\" : \"<div style=\\\"margin-top:-10px;font-size:25px;height:23px\\\">\\u203A</div>\";\n          },\n          \"bottom\": function bottom(d) {\n            return d ? \"<div style=\\\"margin-top:-20px;font-size:25px\\\">\\u02EC</div>\" : \"<div style=\\\"margin-top:0px;line-height:1.2;height:11px;font-size:25px\\\">\\u02C6</div>\";\n          },\n          \"right\": function right(d) {\n            return d ? \"<div style=\\\"margin-top:-10px;font-size:25px;height:23px\\\">\\u203A</div>\" : \"<div style=\\\"margin-top:-10px;line-height:1.2;font-size:25px;height:22px\\\">\\u2039</div>\";\n          },\n          \"top\": function top(d) {\n            return d ? \"<div style=\\\"margin-top:0px;line-height:1.2;height:11px;font-size:25px\\\">\\u02C6</div>\" : \"<div style=\\\"margin-top:-20px;font-size:25px\\\">\\u02EC</div>\";\n          }\n        };\n        return \"<div style=\\\"border-radius:3px;padding:3px;font-size:10px;margin:auto auto;background-color:lightgray\\\"> \".concat(icons[state.layout](node.children), \"  </div>\");\n      },\n      layoutBindings: {\n        \"left\": {\n          \"nodeLeftX\": function nodeLeftX(node) {\n            return 0;\n          },\n          \"nodeRightX\": function nodeRightX(node) {\n            return node.width;\n          },\n          \"nodeTopY\": function nodeTopY(node) {\n            return -node.height / 2;\n          },\n          \"nodeBottomY\": function nodeBottomY(node) {\n            return node.height / 2;\n          },\n          \"nodeJoinX\": function nodeJoinX(node) {\n            return node.x + node.width;\n          },\n          \"nodeJoinY\": function nodeJoinY(node) {\n            return node.y - node.height / 2;\n          },\n          \"linkJoinX\": function linkJoinX(node) {\n            return node.x + node.width;\n          },\n          \"linkJoinY\": function linkJoinY(node) {\n            return node.y;\n          },\n          \"linkX\": function linkX(node) {\n            return node.x;\n          },\n          \"linkY\": function linkY(node) {\n            return node.y;\n          },\n          \"linkCompactXStart\": function linkCompactXStart(node) {\n            return node.x + node.width / 2;\n          },\n          //node.x + (node.compactEven ? node.width / 2 : -node.width / 2),\n          \"linkCompactYStart\": function linkCompactYStart(node) {\n            return node.y + (node.compactEven ? node.height / 2 : -node.height / 2);\n          },\n          \"compactLinkMidX\": function compactLinkMidX(node, state) {\n            return node.firstCompactNode.x;\n          },\n          // node.firstCompactNode.x + node.firstCompactNode.flexCompactDim[0] / 4 + state.compactMarginPair(node) / 4,\n          \"compactLinkMidY\": function compactLinkMidY(node, state) {\n            return node.firstCompactNode.y + node.firstCompactNode.flexCompactDim[0] / 4 + state.compactMarginPair(node) / 4;\n          },\n          \"linkParentX\": function linkParentX(node) {\n            return node.parent.x + node.parent.width;\n          },\n          \"linkParentY\": function linkParentY(node) {\n            return node.parent.y;\n          },\n          \"buttonX\": function buttonX(node) {\n            return node.width;\n          },\n          \"buttonY\": function buttonY(node) {\n            return node.height / 2;\n          },\n          \"centerTransform\": function centerTransform(_ref2) {\n            var root = _ref2.root,\n              rootMargin = _ref2.rootMargin,\n              centerY = _ref2.centerY,\n              scale = _ref2.scale,\n              centerX = _ref2.centerX;\n            return \"translate(\".concat(rootMargin, \",\").concat(centerY, \") scale(\").concat(scale, \")\");\n          },\n          \"compactDimension\": {\n            sizeColumn: function sizeColumn(node) {\n              return node.height;\n            },\n            sizeRow: function sizeRow(node) {\n              return node.width;\n            },\n            reverse: function reverse(arr) {\n              return arr.slice().reverse();\n            }\n          },\n          \"nodeFlexSize\": function nodeFlexSize(_ref3) {\n            var height = _ref3.height,\n              width = _ref3.width,\n              siblingsMargin = _ref3.siblingsMargin,\n              childrenMargin = _ref3.childrenMargin,\n              state = _ref3.state,\n              node = _ref3.node;\n            if (state.compact && node.flexCompactDim) {\n              var result = [node.flexCompactDim[0], node.flexCompactDim[1]];\n              return result;\n            }\n            ;\n            return [height + siblingsMargin, width + childrenMargin];\n          },\n          \"zoomTransform\": function zoomTransform(_ref4) {\n            var centerY = _ref4.centerY,\n              scale = _ref4.scale;\n            return \"translate(\".concat(0, \",\", centerY, \") scale(\").concat(scale, \")\");\n          },\n          \"diagonal\": this.hdiagonal.bind(this),\n          \"swap\": function swap(d) {\n            var x = d.x;\n            d.x = d.y;\n            d.y = x;\n          },\n          \"nodeUpdateTransform\": function nodeUpdateTransform(_ref5) {\n            var x = _ref5.x,\n              y = _ref5.y,\n              width = _ref5.width,\n              height = _ref5.height;\n            return \"translate(\".concat(x, \",\").concat(y - height / 2, \")\");\n          }\n        },\n        \"top\": {\n          \"nodeLeftX\": function nodeLeftX(node) {\n            return -node.width / 2;\n          },\n          \"nodeRightX\": function nodeRightX(node) {\n            return node.width / 2;\n          },\n          \"nodeTopY\": function nodeTopY(node) {\n            return 0;\n          },\n          \"nodeBottomY\": function nodeBottomY(node) {\n            return node.height;\n          },\n          \"nodeJoinX\": function nodeJoinX(node) {\n            return node.x - node.width / 2;\n          },\n          \"nodeJoinY\": function nodeJoinY(node) {\n            return node.y + node.height;\n          },\n          \"linkJoinX\": function linkJoinX(node) {\n            return node.x;\n          },\n          \"linkJoinY\": function linkJoinY(node) {\n            return node.y + node.height;\n          },\n          \"linkCompactXStart\": function linkCompactXStart(node) {\n            return node.x + (node.compactEven ? node.width / 2 : -node.width / 2);\n          },\n          \"linkCompactYStart\": function linkCompactYStart(node) {\n            return node.y + node.height / 2;\n          },\n          \"compactLinkMidX\": function compactLinkMidX(node, state) {\n            return node.firstCompactNode.x + node.firstCompactNode.flexCompactDim[0] / 4 + state.compactMarginPair(node) / 4;\n          },\n          \"compactLinkMidY\": function compactLinkMidY(node) {\n            return node.firstCompactNode.y;\n          },\n          \"compactDimension\": {\n            sizeColumn: function sizeColumn(node) {\n              return node.width;\n            },\n            sizeRow: function sizeRow(node) {\n              return node.height;\n            },\n            reverse: function reverse(arr) {\n              return arr;\n            }\n          },\n          \"linkX\": function linkX(node) {\n            return node.x;\n          },\n          \"linkY\": function linkY(node) {\n            return node.y;\n          },\n          \"linkParentX\": function linkParentX(node) {\n            return node.parent.x;\n          },\n          \"linkParentY\": function linkParentY(node) {\n            return node.parent.y + node.parent.height;\n          },\n          \"buttonX\": function buttonX(node) {\n            return node.width / 2;\n          },\n          \"buttonY\": function buttonY(node) {\n            return node.height;\n          },\n          \"centerTransform\": function centerTransform(_ref6) {\n            var root = _ref6.root,\n              rootMargin = _ref6.rootMargin,\n              centerY = _ref6.centerY,\n              scale = _ref6.scale,\n              centerX = _ref6.centerX;\n            return \"translate(\".concat(centerX, \",\").concat(rootMargin, \") scale(\").concat(scale, \")\");\n          },\n          \"nodeFlexSize\": function nodeFlexSize(_ref7) {\n            var height = _ref7.height,\n              width = _ref7.width,\n              siblingsMargin = _ref7.siblingsMargin,\n              childrenMargin = _ref7.childrenMargin,\n              state = _ref7.state,\n              node = _ref7.node,\n              compactViewIndex = _ref7.compactViewIndex;\n            if (state.compact && node.flexCompactDim) {\n              var result = [node.flexCompactDim[0], node.flexCompactDim[1]];\n              return result;\n            }\n            ;\n            return [width + siblingsMargin, height + childrenMargin];\n          },\n          \"zoomTransform\": function zoomTransform(_ref8) {\n            var centerX = _ref8.centerX,\n              scale = _ref8.scale;\n            return \"translate(\".concat(centerX, \",0}) scale(\").concat(scale, \")\");\n          },\n          \"diagonal\": this.diagonal.bind(this),\n          \"swap\": function swap(d) {},\n          \"nodeUpdateTransform\": function nodeUpdateTransform(_ref9) {\n            var x = _ref9.x,\n              y = _ref9.y,\n              width = _ref9.width,\n              height = _ref9.height;\n            return \"translate(\".concat(x - width / 2, \",\").concat(y, \")\");\n          }\n        },\n        \"bottom\": {\n          \"nodeLeftX\": function nodeLeftX(node) {\n            return -node.width / 2;\n          },\n          \"nodeRightX\": function nodeRightX(node) {\n            return node.width / 2;\n          },\n          \"nodeTopY\": function nodeTopY(node) {\n            return -node.height;\n          },\n          \"nodeBottomY\": function nodeBottomY(node) {\n            return 0;\n          },\n          \"nodeJoinX\": function nodeJoinX(node) {\n            return node.x - node.width / 2;\n          },\n          \"nodeJoinY\": function nodeJoinY(node) {\n            return node.y - node.height - node.height;\n          },\n          \"linkJoinX\": function linkJoinX(node) {\n            return node.x;\n          },\n          \"linkJoinY\": function linkJoinY(node) {\n            return node.y - node.height;\n          },\n          \"linkCompactXStart\": function linkCompactXStart(node) {\n            return node.x + (node.compactEven ? node.width / 2 : -node.width / 2);\n          },\n          \"linkCompactYStart\": function linkCompactYStart(node) {\n            return node.y - node.height / 2;\n          },\n          \"compactLinkMidX\": function compactLinkMidX(node, state) {\n            return node.firstCompactNode.x + node.firstCompactNode.flexCompactDim[0] / 4 + state.compactMarginPair(node) / 4;\n          },\n          \"compactLinkMidY\": function compactLinkMidY(node) {\n            return node.firstCompactNode.y;\n          },\n          \"linkX\": function linkX(node) {\n            return node.x;\n          },\n          \"linkY\": function linkY(node) {\n            return node.y;\n          },\n          \"compactDimension\": {\n            sizeColumn: function sizeColumn(node) {\n              return node.width;\n            },\n            sizeRow: function sizeRow(node) {\n              return node.height;\n            },\n            reverse: function reverse(arr) {\n              return arr;\n            }\n          },\n          \"linkParentX\": function linkParentX(node) {\n            return node.parent.x;\n          },\n          \"linkParentY\": function linkParentY(node) {\n            return node.parent.y - node.parent.height;\n          },\n          \"buttonX\": function buttonX(node) {\n            return node.width / 2;\n          },\n          \"buttonY\": function buttonY(node) {\n            return 0;\n          },\n          \"centerTransform\": function centerTransform(_ref10) {\n            var root = _ref10.root,\n              rootMargin = _ref10.rootMargin,\n              centerY = _ref10.centerY,\n              scale = _ref10.scale,\n              centerX = _ref10.centerX,\n              chartHeight = _ref10.chartHeight;\n            return \"translate(\".concat(centerX, \",\").concat(chartHeight - rootMargin, \") scale(\").concat(scale, \")\");\n          },\n          \"nodeFlexSize\": function nodeFlexSize(_ref11) {\n            var height = _ref11.height,\n              width = _ref11.width,\n              siblingsMargin = _ref11.siblingsMargin,\n              childrenMargin = _ref11.childrenMargin,\n              state = _ref11.state,\n              node = _ref11.node;\n            if (state.compact && node.flexCompactDim) {\n              var result = [node.flexCompactDim[0], node.flexCompactDim[1]];\n              return result;\n            }\n            ;\n            return [width + siblingsMargin, height + childrenMargin];\n          },\n          \"zoomTransform\": function zoomTransform(_ref12) {\n            var centerX = _ref12.centerX,\n              scale = _ref12.scale;\n            return \"translate(\".concat(centerX, \",0}) scale(\").concat(scale, \")\");\n          },\n          \"diagonal\": this.diagonal.bind(this),\n          \"swap\": function swap(d) {\n            d.y = -d.y;\n          },\n          \"nodeUpdateTransform\": function nodeUpdateTransform(_ref13) {\n            var x = _ref13.x,\n              y = _ref13.y,\n              width = _ref13.width,\n              height = _ref13.height;\n            return \"translate(\".concat(x - width / 2, \",\").concat(y - height, \")\");\n          }\n        },\n        \"right\": {\n          \"nodeLeftX\": function nodeLeftX(node) {\n            return -node.width;\n          },\n          \"nodeRightX\": function nodeRightX(node) {\n            return 0;\n          },\n          \"nodeTopY\": function nodeTopY(node) {\n            return -node.height / 2;\n          },\n          \"nodeBottomY\": function nodeBottomY(node) {\n            return node.height / 2;\n          },\n          \"nodeJoinX\": function nodeJoinX(node) {\n            return node.x - node.width - node.width;\n          },\n          \"nodeJoinY\": function nodeJoinY(node) {\n            return node.y - node.height / 2;\n          },\n          \"linkJoinX\": function linkJoinX(node) {\n            return node.x - node.width;\n          },\n          \"linkJoinY\": function linkJoinY(node) {\n            return node.y;\n          },\n          \"linkX\": function linkX(node) {\n            return node.x;\n          },\n          \"linkY\": function linkY(node) {\n            return node.y;\n          },\n          \"linkParentX\": function linkParentX(node) {\n            return node.parent.x - node.parent.width;\n          },\n          \"linkParentY\": function linkParentY(node) {\n            return node.parent.y;\n          },\n          \"buttonX\": function buttonX(node) {\n            return 0;\n          },\n          \"buttonY\": function buttonY(node) {\n            return node.height / 2;\n          },\n          \"linkCompactXStart\": function linkCompactXStart(node) {\n            return node.x - node.width / 2;\n          },\n          //node.x + (node.compactEven ? node.width / 2 : -node.width / 2),\n          \"linkCompactYStart\": function linkCompactYStart(node) {\n            return node.y + (node.compactEven ? node.height / 2 : -node.height / 2);\n          },\n          \"compactLinkMidX\": function compactLinkMidX(node, state) {\n            return node.firstCompactNode.x;\n          },\n          // node.firstCompactNode.x + node.firstCompactNode.flexCompactDim[0] / 4 + state.compactMarginPair(node) / 4,\n          \"compactLinkMidY\": function compactLinkMidY(node, state) {\n            return node.firstCompactNode.y + node.firstCompactNode.flexCompactDim[0] / 4 + state.compactMarginPair(node) / 4;\n          },\n          \"centerTransform\": function centerTransform(_ref14) {\n            var root = _ref14.root,\n              rootMargin = _ref14.rootMargin,\n              centerY = _ref14.centerY,\n              scale = _ref14.scale,\n              centerX = _ref14.centerX,\n              chartWidth = _ref14.chartWidth;\n            return \"translate(\".concat(chartWidth - rootMargin, \",\").concat(centerY, \") scale(\").concat(scale, \")\");\n          },\n          \"nodeFlexSize\": function nodeFlexSize(_ref15) {\n            var height = _ref15.height,\n              width = _ref15.width,\n              siblingsMargin = _ref15.siblingsMargin,\n              childrenMargin = _ref15.childrenMargin,\n              state = _ref15.state,\n              node = _ref15.node;\n            if (state.compact && node.flexCompactDim) {\n              var result = [node.flexCompactDim[0], node.flexCompactDim[1]];\n              return result;\n            }\n            ;\n            return [height + siblingsMargin, width + childrenMargin];\n          },\n          \"compactDimension\": {\n            sizeColumn: function sizeColumn(node) {\n              return node.height;\n            },\n            sizeRow: function sizeRow(node) {\n              return node.width;\n            },\n            reverse: function reverse(arr) {\n              return arr.slice().reverse();\n            }\n          },\n          \"zoomTransform\": function zoomTransform(_ref16) {\n            var centerY = _ref16.centerY,\n              scale = _ref16.scale;\n            return \"translate(\".concat(0, \",\", centerY, \") scale(\").concat(scale, \")\");\n          },\n          \"diagonal\": this.hdiagonal.bind(this),\n          \"swap\": function swap(d) {\n            var x = d.x;\n            d.x = -d.y;\n            d.y = x;\n          },\n          \"nodeUpdateTransform\": function nodeUpdateTransform(_ref17) {\n            var x = _ref17.x,\n              y = _ref17.y,\n              width = _ref17.width,\n              height = _ref17.height;\n            return \"translate(\".concat(x - width, \",\").concat(y - height / 2, \")\");\n          }\n        }\n      }\n    };\n    this.getChartState = function () {\n      return attrs;\n    };\n\n    // Dynamically set getter and setter functions for Chart class\n    Object.keys(attrs).forEach(function (key) {\n      //@ts-ignore\n      _this2[key] = function (_) {\n        if (!arguments.length) {\n          return attrs[key];\n        } else {\n          attrs[key] = _;\n        }\n        return this;\n      };\n    });\n    this.initializeEnterExitUpdatePattern();\n  }\n  _createClass(OrgChart, [{\n    key: \"initializeEnterExitUpdatePattern\",\n    value: function initializeEnterExitUpdatePattern() {\n      d3.selection.prototype.patternify = function (params) {\n        var container = this;\n        var selector = params.selector;\n        var elementTag = params.tag;\n        var data = params.data || [selector];\n\n        // Pattern in action\n        var selection = container.selectAll(\".\" + selector).data(data, function (d, i) {\n          if (typeof d === \"object\") {\n            if (d.id) {\n              return d.id;\n            }\n          }\n          return i;\n        });\n        selection.exit().remove();\n        selection = selection.enter().append(elementTag).merge(selection);\n        selection.attr(\"class\", selector);\n        return selection;\n      };\n    } // This method retrieves passed node's children IDs (including node)\n  }, {\n    key: \"getNodeChildren\",\n    value: function getNodeChildren(_ref18, nodeStore) {\n      var _this3 = this;\n      var data = _ref18.data,\n        children = _ref18.children,\n        _children = _ref18._children;\n      // Store current node ID\n      nodeStore.push(data);\n\n      // Loop over children and recursively store descendants id (expanded nodes)\n      if (children) {\n        children.forEach(function (d) {\n          _this3.getNodeChildren(d, nodeStore);\n        });\n      }\n\n      // Loop over _children and recursively store descendants id (collapsed nodes)\n      if (_children) {\n        _children.forEach(function (d) {\n          _this3.getNodeChildren(d, nodeStore);\n        });\n      }\n\n      // Return result\n      return nodeStore;\n    } // This method can be invoked via chart.setZoomFactor API, it zooms to particulat scale\n  }, {\n    key: \"initialZoom\",\n    value: function initialZoom(zoomLevel) {\n      var attrs = this.getChartState();\n      attrs.lastTransform.k = zoomLevel;\n      return this;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n      //InnerFunctions which will update visuals\n      var attrs = this.getChartState();\n      if (!attrs.data || attrs.data.length == 0) {\n        console.log('ORG CHART - Data is empty');\n        return this;\n      }\n\n      //Drawing containers\n      var container = d3.select(attrs.container);\n      var containerRect = container.node().getBoundingClientRect();\n      if (containerRect.width > 0) attrs.svgWidth = containerRect.width;\n\n      //Calculated properties\n      var calc = {\n        id: \"ID\".concat(Math.floor(Math.random() * 1000000)),\n        // id for event handlings,\n        chartWidth: attrs.svgWidth,\n        chartHeight: attrs.svgHeight\n      };\n      attrs.calc = calc;\n\n      // Calculate max node depth (it's needed for layout heights calculation)\n      calc.centerX = calc.chartWidth / 2;\n      calc.centerY = calc.chartHeight / 2;\n\n      // ******************* BEHAVIORS  **********************\n      if (attrs.firstDraw) {\n        var behaviors = {\n          zoom: null\n        };\n\n        // Get zooming function\n        behaviors.zoom = d3.zoom().on(\"zoom\", function (event, d) {\n          return _this4.zoomed(event, d);\n        }).scaleExtent(attrs.scaleExtent);\n        attrs.zoomBehavior = behaviors.zoom;\n      }\n\n      //****************** ROOT node work ************************\n\n      attrs.flexTreeLayout = flextree({\n        nodeSize: function nodeSize(node) {\n          var width = attrs.nodeWidth(node);\n          ;\n          var height = attrs.nodeHeight(node);\n          var siblingsMargin = attrs.siblingsMargin(node);\n          var childrenMargin = attrs.childrenMargin(node);\n          return attrs.layoutBindings[attrs.layout].nodeFlexSize({\n            state: attrs,\n            node: node,\n            width: width,\n            height: height,\n            siblingsMargin: siblingsMargin,\n            childrenMargin: childrenMargin\n          });\n        }\n      }).spacing(function (nodeA, nodeB) {\n        return nodeA.parent == nodeB.parent ? 0 : attrs.neightbourMargin(nodeA, nodeB);\n      });\n      this.setLayouts({\n        expandNodesFirst: false\n      });\n\n      // *************************  DRAWING **************************\n      //Add svg\n      var svg = container.patternify({\n        tag: \"svg\",\n        selector: \"svg-chart-container\"\n      }).style('background-color', attrs.backgroundColor).attr(\"width\", attrs.svgWidth).attr(\"height\", attrs.svgHeight).attr(\"font-family\", attrs.defaultFont);\n      if (attrs.firstDraw) {\n        svg.call(attrs.zoomBehavior).on(\"dblclick.zoom\", null).attr(\"cursor\", \"move\");\n      }\n      attrs.svg = svg;\n\n      //Add container g element\n      var chart = svg.patternify({\n        tag: \"g\",\n        selector: \"chart\"\n      });\n\n      // Add one more container g element, for better positioning controls\n      attrs.centerG = chart.patternify({\n        tag: \"g\",\n        selector: \"center-group\"\n      });\n      attrs.linksWrapper = attrs.centerG.patternify({\n        tag: \"g\",\n        selector: \"links-wrapper\"\n      });\n      attrs.nodesWrapper = attrs.centerG.patternify({\n        tag: \"g\",\n        selector: \"nodes-wrapper\"\n      });\n      attrs.connectionsWrapper = attrs.centerG.patternify({\n        tag: \"g\",\n        selector: \"connections-wrapper\"\n      });\n      attrs.defsWrapper = svg.patternify({\n        tag: \"g\",\n        selector: \"defs-wrapper\"\n      });\n      if (attrs.firstDraw) {\n        attrs.centerG.attr(\"transform\", function () {\n          return attrs.layoutBindings[attrs.layout].centerTransform({\n            centerX: calc.centerX,\n            centerY: calc.centerY,\n            scale: attrs.lastTransform.k,\n            rootMargin: attrs.rootMargin,\n            root: attrs.root,\n            chartHeight: calc.chartHeight,\n            chartWidth: calc.chartWidth\n          });\n        });\n      }\n      attrs.chart = chart;\n\n      // Display tree contenrs\n      this.update(attrs.root);\n\n      //#########################################  UTIL FUNCS ##################################\n      // This function restyles foreign object elements ()\n\n      d3.select(window).on(\"resize.\".concat(attrs.id), function () {\n        var containerRect = d3.select(attrs.container).node().getBoundingClientRect();\n        attrs.svg.attr('width', containerRect.width);\n      });\n      if (attrs.firstDraw) {\n        attrs.firstDraw = false;\n      }\n      return this;\n    } // This function can be invoked via chart.addNode API, and it adds node in tree at runtime\n  }, {\n    key: \"addNode\",\n    value: function addNode(obj) {\n      var attrs = this.getChartState();\n      var nodeFound = attrs.allNodes.filter(function (_ref19) {\n        var data = _ref19.data;\n        return attrs.nodeId(data) === attrs.nodeId(obj);\n      })[0];\n      var parentFound = attrs.allNodes.filter(function (_ref20) {\n        var data = _ref20.data;\n        return attrs.nodeId(data) === attrs.parentNodeId(obj);\n      })[0];\n      if (nodeFound) {\n        console.log(\"ORG CHART - ADD - Node with id \\\"\".concat(attrs.nodeId(obj), \"\\\" already exists in tree\"));\n        return this;\n      }\n      if (!parentFound) {\n        console.log(\"ORG CHART - ADD - Parent node with id \\\"\".concat(attrs.parentNodeId(obj), \"\\\" not found in the tree\"));\n        return this;\n      }\n      if (obj._centered && !obj._expanded) obj._expanded = true;\n      attrs.data.push(obj);\n\n      // Update state of nodes and redraw graph\n      this.updateNodesState();\n      return this;\n    } // This function can be invoked via chart.removeNode API, and it removes node from tree at runtime\n  }, {\n    key: \"removeNode\",\n    value: function removeNode(nodeId) {\n      var attrs = this.getChartState();\n      var node = attrs.allNodes.filter(function (_ref21) {\n        var data = _ref21.data;\n        return attrs.nodeId(data) == nodeId;\n      })[0];\n      if (!node) {\n        console.log(\"ORG CHART - REMOVE - Node with id \\\"\".concat(nodeId, \"\\\" not found in the tree\"));\n        return this;\n      }\n\n      // Remove all node childs\n      // Retrieve all children nodes ids (including current node itself)\n      node.descendants().forEach(function (d) {\n        return d.data._filteredOut = true;\n      });\n      var descendants = this.getNodeChildren(node, [], attrs.nodeId);\n      descendants.forEach(function (d) {\n        return d._filtered = true;\n      });\n\n      // Filter out retrieved nodes and reassign data\n      attrs.data = attrs.data.filter(function (d) {\n        return !d._filtered;\n      });\n      var updateNodesState = this.updateNodesState.bind(this);\n      // Update state of nodes and redraw graph\n      updateNodesState();\n      return this;\n    }\n  }, {\n    key: \"groupBy\",\n    value: function groupBy(array, accessor, aggegator) {\n      var grouped = {};\n      array.forEach(function (item) {\n        var key = accessor(item);\n        if (!grouped[key]) {\n          grouped[key] = [];\n        }\n        grouped[key].push(item);\n      });\n      Object.keys(grouped).forEach(function (key) {\n        grouped[key] = aggegator(grouped[key]);\n      });\n      return Object.entries(grouped);\n    }\n  }, {\n    key: \"calculateCompactFlexDimensions\",\n    value: function calculateCompactFlexDimensions(root) {\n      var _this5 = this;\n      var attrs = this.getChartState();\n      root.eachBefore(function (node) {\n        node.firstCompact = null;\n        node.compactEven = null;\n        node.flexCompactDim = null;\n        node.firstCompactNode = null;\n      });\n      root.eachBefore(function (node) {\n        if (node.children && node.children.length > 1) {\n          var compactChildren = node.children.filter(function (d) {\n            return !d.children;\n          });\n          if (compactChildren.length < 2) return;\n          compactChildren.forEach(function (child, i) {\n            if (!i) child.firstCompact = true;\n            if (i % 2) child.compactEven = false;else child.compactEven = true;\n            child.row = Math.floor(i / 2);\n          });\n          var evenMaxColumnDimension = d3.max(compactChildren.filter(function (d) {\n            return d.compactEven;\n          }), attrs.layoutBindings[attrs.layout].compactDimension.sizeColumn);\n          var oddMaxColumnDimension = d3.max(compactChildren.filter(function (d) {\n            return !d.compactEven;\n          }), attrs.layoutBindings[attrs.layout].compactDimension.sizeColumn);\n          var columnSize = Math.max(evenMaxColumnDimension, oddMaxColumnDimension) * 2;\n          var rowsMapNew = _this5.groupBy(compactChildren, function (d) {\n            return d.row;\n          }, function (reducedGroup) {\n            return d3.max(reducedGroup, function (d) {\n              return attrs.layoutBindings[attrs.layout].compactDimension.sizeRow(d) + attrs.compactMarginBetween(d);\n            });\n          });\n          var rowSize = d3.sum(rowsMapNew.map(function (v) {\n            return v[1];\n          }));\n          compactChildren.forEach(function (node) {\n            node.firstCompactNode = compactChildren[0];\n            if (node.firstCompact) {\n              node.flexCompactDim = [columnSize + attrs.compactMarginPair(node), rowSize - attrs.compactMarginBetween(node)];\n            } else {\n              node.flexCompactDim = [0, 0];\n            }\n          });\n          node.flexCompactDim = null;\n        }\n      });\n    }\n  }, {\n    key: \"calculateCompactFlexPositions\",\n    value: function calculateCompactFlexPositions(root) {\n      var _this6 = this;\n      var attrs = this.getChartState();\n      root.eachBefore(function (node) {\n        if (node.children) {\n          var compactChildren = node.children.filter(function (d) {\n            return d.flexCompactDim;\n          });\n          var fch = compactChildren[0];\n          if (!fch) return;\n          compactChildren.forEach(function (child, i, arr) {\n            if (i == 0) fch.x -= fch.flexCompactDim[0] / 2;\n            if (i & i % 2 - 1) child.x = fch.x + fch.flexCompactDim[0] * 0.25 - attrs.compactMarginPair(child) / 4;else if (i) child.x = fch.x + fch.flexCompactDim[0] * 0.75 + attrs.compactMarginPair(child) / 4;\n          });\n          var centerX = fch.x + fch.flexCompactDim[0] * 0.5;\n          fch.x = fch.x + fch.flexCompactDim[0] * 0.25 - attrs.compactMarginPair(fch) / 4;\n          var offsetX = node.x - centerX;\n          if (Math.abs(offsetX) < 10) {\n            compactChildren.forEach(function (d) {\n              return d.x += offsetX;\n            });\n          }\n          var rowsMapNew = _this6.groupBy(compactChildren, function (d) {\n            return d.row;\n          }, function (reducedGroup) {\n            return d3.max(reducedGroup, function (d) {\n              return attrs.layoutBindings[attrs.layout].compactDimension.sizeRow(d);\n            });\n          });\n          var cumSum = d3.cumsum(rowsMapNew.map(function (d) {\n            return d[1] + attrs.compactMarginBetween(d);\n          }));\n          compactChildren.forEach(function (node, i) {\n            if (node.row) {\n              node.y = fch.y + cumSum[node.row - 1];\n            } else {\n              node.y = fch.y;\n            }\n          });\n        }\n      });\n    } // This function basically redraws visible graph, based on nodes state\n  }, {\n    key: \"update\",\n    value: function update(_ref22) {\n      var _this7 = this;\n      var x0 = _ref22.x0,\n        y0 = _ref22.y0,\n        _ref22$x = _ref22.x,\n        x = _ref22$x === void 0 ? 0 : _ref22$x,\n        _ref22$y = _ref22.y,\n        y = _ref22$y === void 0 ? 0 : _ref22$y,\n        width = _ref22.width,\n        height = _ref22.height;\n      var attrs = this.getChartState();\n      var calc = attrs.calc;\n      if (attrs.compact) {\n        this.calculateCompactFlexDimensions(attrs.root);\n      }\n\n      //  Assigns the x and y position for the nodes\n      var treeData = attrs.flexTreeLayout(attrs.root);\n\n      // Reassigns the x and y position for the based on the compact layout\n      if (attrs.compact) {\n        this.calculateCompactFlexPositions(attrs.root);\n      }\n      var nodes = treeData.descendants();\n\n      // console.table(nodes.map(d => ({ x: d.x, y: d.y, width: d.width, height: d.height, flexCompactDim: d.flexCompactDim + \"\" })))\n\n      // Get all links\n      var links = treeData.descendants().slice(1);\n      nodes.forEach(attrs.layoutBindings[attrs.layout].swap);\n\n      // Connections\n      var connections = attrs.connections;\n      var allNodesMap = {};\n      attrs.allNodes.forEach(function (d) {\n        return allNodesMap[attrs.nodeId(d.data)] = d;\n      });\n      var visibleNodesMap = {};\n      nodes.forEach(function (d) {\n        return visibleNodesMap[attrs.nodeId(d.data)] = d;\n      });\n      connections.forEach(function (connection) {\n        var source = allNodesMap[connection.from];\n        var target = allNodesMap[connection.to];\n        connection._source = source;\n        connection._target = target;\n      });\n      var visibleConnections = connections.filter(function (d) {\n        return visibleNodesMap[d.from] && visibleNodesMap[d.to];\n      });\n      var defsString = attrs.defs.bind(this)(attrs, visibleConnections);\n      var existingString = attrs.defsWrapper.html();\n      if (defsString !== existingString) {\n        attrs.defsWrapper.html(defsString);\n      }\n\n      // --------------------------  LINKS ----------------------\n      // Get links selection\n      var linkSelection = attrs.linksWrapper.selectAll(\"path.link\").data(links, function (d) {\n        return attrs.nodeId(d.data);\n      });\n\n      // Enter any new links at the parent's previous position.\n      var linkEnter = linkSelection.enter().insert(\"path\", \"g\").attr(\"class\", \"link\").attr(\"d\", function (d) {\n        var xo = attrs.layoutBindings[attrs.layout].linkJoinX({\n          x: x0,\n          y: y0,\n          width: width,\n          height: height\n        });\n        var yo = attrs.layoutBindings[attrs.layout].linkJoinY({\n          x: x0,\n          y: y0,\n          width: width,\n          height: height\n        });\n        var o = {\n          x: xo,\n          y: yo\n        };\n        return attrs.layoutBindings[attrs.layout].diagonal(o, o, o);\n      });\n\n      // Get links update selection\n      var linkUpdate = linkEnter.merge(linkSelection);\n\n      // Styling links\n      linkUpdate.attr(\"fill\", \"none\");\n\n      // Allow external modifications\n      linkUpdate.each(attrs.linkUpdate);\n\n      // Transition back to the parent element position\n      linkUpdate.transition().duration(attrs.duration).attr(\"d\", function (d) {\n        var n = attrs.compact && d.flexCompactDim ? {\n          x: attrs.layoutBindings[attrs.layout].compactLinkMidX(d, attrs),\n          y: attrs.layoutBindings[attrs.layout].compactLinkMidY(d, attrs)\n        } : {\n          x: attrs.layoutBindings[attrs.layout].linkX(d),\n          y: attrs.layoutBindings[attrs.layout].linkY(d)\n        };\n        var p = {\n          x: attrs.layoutBindings[attrs.layout].linkParentX(d),\n          y: attrs.layoutBindings[attrs.layout].linkParentY(d)\n        };\n        var m = attrs.compact && d.flexCompactDim ? {\n          x: attrs.layoutBindings[attrs.layout].linkCompactXStart(d),\n          y: attrs.layoutBindings[attrs.layout].linkCompactYStart(d)\n        } : n;\n        return attrs.layoutBindings[attrs.layout].diagonal(n, p, m);\n      });\n\n      // Remove any  links which is exiting after animation\n      var linkExit = linkSelection.exit().transition().duration(attrs.duration).attr(\"d\", function (d) {\n        var xo = attrs.layoutBindings[attrs.layout].linkJoinX({\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        });\n        var yo = attrs.layoutBindings[attrs.layout].linkJoinY({\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        });\n        var o = {\n          x: xo,\n          y: yo\n        };\n        return attrs.layoutBindings[attrs.layout].diagonal(o, o);\n      }).remove();\n\n      // --------------------------  CONNECTIONS ----------------------\n\n      var connectionsSel = attrs.connectionsWrapper.selectAll(\"path.connection\").data(visibleConnections);\n\n      // Enter any new connections at the parent's previous position.\n      var connEnter = connectionsSel.enter().insert(\"path\", \"g\").attr(\"class\", \"connection\").attr(\"d\", function (d) {\n        var xo = attrs.layoutBindings[attrs.layout].linkJoinX({\n          x: x0,\n          y: y0,\n          width: width,\n          height: height\n        });\n        var yo = attrs.layoutBindings[attrs.layout].linkJoinY({\n          x: x0,\n          y: y0,\n          width: width,\n          height: height\n        });\n        var o = {\n          x: xo,\n          y: yo\n        };\n        return attrs.layoutBindings[attrs.layout].diagonal(o, o);\n      });\n\n      // Get connections update selection\n      var connUpdate = connEnter.merge(connectionsSel);\n\n      // Styling connections\n      connUpdate.attr(\"fill\", \"none\");\n\n      // Transition back to the parent element position\n      connUpdate.transition().duration(attrs.duration).attr('d', function (d) {\n        var xs = attrs.layoutBindings[attrs.layout].linkX({\n          x: d._source.x,\n          y: d._source.y,\n          width: d._source.width,\n          height: d._source.height\n        });\n        var ys = attrs.layoutBindings[attrs.layout].linkY({\n          x: d._source.x,\n          y: d._source.y,\n          width: d._source.width,\n          height: d._source.height\n        });\n        var xt = attrs.layoutBindings[attrs.layout].linkJoinX({\n          x: d._target.x,\n          y: d._target.y,\n          width: d._target.width,\n          height: d._target.height\n        });\n        var yt = attrs.layoutBindings[attrs.layout].linkJoinY({\n          x: d._target.x,\n          y: d._target.y,\n          width: d._target.width,\n          height: d._target.height\n        });\n        return attrs.linkGroupArc({\n          source: {\n            x: xs,\n            y: ys\n          },\n          target: {\n            x: xt,\n            y: yt\n          }\n        });\n      });\n\n      // Allow external modifications\n      connUpdate.each(attrs.connectionsUpdate);\n\n      // Remove any  links which is exiting after animation\n      var connExit = connectionsSel.exit().transition().duration(attrs.duration).attr('opacity', 0).remove();\n\n      // --------------------------  NODES ----------------------\n      // Get nodes selection\n      var nodesSelection = attrs.nodesWrapper.selectAll(\"g.node\").data(nodes, function (_ref23) {\n        var data = _ref23.data;\n        return attrs.nodeId(data);\n      });\n\n      // Enter any new nodes at the parent's previous position.\n      var nodeEnter = nodesSelection.enter().append(\"g\").attr(\"class\", \"node\").attr(\"transform\", function (d) {\n        if (d == attrs.root) return \"translate(\".concat(x0, \",\").concat(y0, \")\");\n        var xj = attrs.layoutBindings[attrs.layout].nodeJoinX({\n          x: x0,\n          y: y0,\n          width: width,\n          height: height\n        });\n        var yj = attrs.layoutBindings[attrs.layout].nodeJoinY({\n          x: x0,\n          y: y0,\n          width: width,\n          height: height\n        });\n        return \"translate(\".concat(xj, \",\").concat(yj, \")\");\n      }).attr(\"cursor\", \"pointer\").on(\"click\", function (event, _ref24) {\n        var data = _ref24.data;\n        if (_toConsumableArray(event.srcElement.classList).includes(\"node-button-foreign-object\")) {\n          return;\n        }\n        attrs.onNodeClick(attrs.nodeId(data));\n      });\n\n      // Add background rectangle for the nodes\n      nodeEnter.patternify({\n        tag: \"rect\",\n        selector: \"node-rect\",\n        data: function data(d) {\n          return [d];\n        }\n      });\n\n      // Node update styles\n      var nodeUpdate = nodeEnter.merge(nodesSelection).style(\"font\", \"12px sans-serif\");\n\n      // Add foreignObject element inside rectangle\n      var fo = nodeUpdate.patternify({\n        tag: \"foreignObject\",\n        selector: \"node-foreign-object\",\n        data: function data(d) {\n          return [d];\n        }\n      }).style('overflow', 'visible');\n\n      // Add foreign object\n      fo.patternify({\n        tag: \"xhtml:div\",\n        selector: \"node-foreign-object-div\",\n        data: function data(d) {\n          return [d];\n        }\n      });\n      this.restyleForeignObjectElements();\n\n      // Add Node button circle's group (expand-collapse button)\n      var nodeButtonGroups = nodeEnter.patternify({\n        tag: \"g\",\n        selector: \"node-button-g\",\n        data: function data(d) {\n          return [d];\n        }\n      }).on(\"click\", function (event, d) {\n        return _this7.onButtonClick(event, d);\n      }).on(\"keydown\", function (event, d) {\n        if (event.key === 'Enter' || event.key === ' ' || event.key === 'Spacebar') {\n          _this7.onButtonClick(event, d);\n        }\n      });\n      nodeButtonGroups.patternify({\n        tag: 'rect',\n        selector: 'node-button-rect',\n        data: function data(d) {\n          return [d];\n        }\n      }).attr('opacity', 0).attr('pointer-events', 'all').attr('width', 40).attr('height', 40).attr('x', -20).attr('y', -20);\n\n      // Add expand collapse button content\n      var nodeFo = nodeButtonGroups.patternify({\n        tag: \"foreignObject\",\n        selector: \"node-button-foreign-object\",\n        data: function data(d) {\n          return [d];\n        }\n      }).attr('width', 40).attr('height', 40).attr('x', -20).attr('y', -20).style('overflow', 'visible').patternify({\n        tag: \"xhtml:div\",\n        selector: \"node-button-div\",\n        data: function data(d) {\n          return [d];\n        }\n      }).style('pointer-events', 'none').style('display', 'flex').style('width', '100%').style('height', '100%');\n\n      // Transition to the proper position for the node\n      nodeUpdate.transition().attr(\"opacity\", 0).duration(attrs.duration).attr(\"transform\", function (_ref25) {\n        var x = _ref25.x,\n          y = _ref25.y,\n          width = _ref25.width,\n          height = _ref25.height;\n        return attrs.layoutBindings[attrs.layout].nodeUpdateTransform({\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        });\n      }).attr(\"opacity\", 1);\n\n      // Style node rectangles\n      nodeUpdate.select(\".node-rect\").attr(\"width\", function (_ref26) {\n        var width = _ref26.width;\n        return width;\n      }).attr(\"height\", function (_ref27) {\n        var height = _ref27.height;\n        return height;\n      }).attr(\"x\", function (_ref28) {\n        var width = _ref28.width;\n        return 0;\n      }).attr(\"y\", function (_ref29) {\n        var height = _ref29.height;\n        return 0;\n      }).attr(\"cursor\", \"pointer\").attr('rx', 3).attr(\"fill\", attrs.nodeDefaultBackground);\n\n      // Move node button group to the desired position\n      nodeUpdate.select(\".node-button-g\").attr(\"transform\", function (_ref30) {\n        var data = _ref30.data,\n          width = _ref30.width,\n          height = _ref30.height;\n        var x = attrs.layoutBindings[attrs.layout].buttonX({\n          width: width,\n          height: height\n        });\n        var y = attrs.layoutBindings[attrs.layout].buttonY({\n          width: width,\n          height: height\n        });\n        return \"translate(\".concat(x, \",\").concat(y, \")\");\n      }).attr(\"display\", function (_ref31) {\n        var data = _ref31.data;\n        return data._directSubordinates > 0 ? null : 'none';\n      }).attr(\"opacity\", function (_ref32) {\n        var children = _ref32.children,\n          _children = _ref32._children;\n        if (children || _children) {\n          return 1;\n        }\n        return 0;\n      });\n\n      // Restyle node button circle\n      nodeUpdate.select(\".node-button-foreign-object .node-button-div\").html(function (node) {\n        return attrs.buttonContent({\n          node: node,\n          state: attrs\n        });\n      });\n\n      // Restyle button texts\n      nodeUpdate.select(\".node-button-text\").attr(\"text-anchor\", \"middle\").attr(\"alignment-baseline\", \"middle\").attr(\"fill\", attrs.defaultTextFill).attr(\"font-size\", function (_ref33) {\n        var children = _ref33.children;\n        if (children) return 40;\n        return 26;\n      }).text(function (_ref34) {\n        var children = _ref34.children;\n        if (children) return \"-\";\n        return \"+\";\n      }).attr(\"y\", this.isEdge() ? 10 : 0);\n      nodeUpdate.each(attrs.nodeUpdate);\n\n      // Remove any exiting nodes after transition\n      var nodeExitTransition = nodesSelection.exit().attr(\"opacity\", 1).transition().duration(attrs.duration).attr(\"transform\", function (d) {\n        var ex = attrs.layoutBindings[attrs.layout].nodeJoinX({\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        });\n        var ey = attrs.layoutBindings[attrs.layout].nodeJoinY({\n          x: x,\n          y: y,\n          width: width,\n          height: height\n        });\n        return \"translate(\".concat(ex, \",\").concat(ey, \")\");\n      }).on(\"end\", function () {\n        d3.select(this).remove();\n      }).attr(\"opacity\", 0);\n\n      // Store the old positions for transition.\n      nodes.forEach(function (d) {\n        d.x0 = d.x;\n        d.y0 = d.y;\n      });\n\n      // CHECK FOR CENTERING\n      var centeredNode = attrs.allNodes.filter(function (d) {\n        return d.data._centered;\n      })[0];\n      if (centeredNode) {\n        var centeredNodes = centeredNode.data._centeredWithDescendants ? centeredNode.descendants().filter(function (d, i) {\n          return i < 7;\n        }) : [centeredNode];\n        centeredNode.data._centeredWithDescendants = null;\n        centeredNode.data._centered = null;\n        this.fit({\n          animate: true,\n          scale: false,\n          nodes: centeredNodes\n        });\n      }\n    } // This function detects whether current browser is edge\n  }, {\n    key: \"isEdge\",\n    value: function isEdge() {\n      return window.navigator.userAgent.includes(\"Edge\");\n    } // Generate horizontal diagonal - play with it here - https://observablehq.com/@bumbeishvili/curved-edges-horizontal-d3-v3-v4-v5-v6\n  }, {\n    key: \"hdiagonal\",\n    value: function hdiagonal(s, t, m) {\n      // Define source and target x,y coordinates\n      var x = s.x;\n      var y = s.y;\n      var ex = t.x;\n      var ey = t.y;\n      var mx = m && m.x || x;\n      var my = m && m.y || y;\n\n      // Values in case of top reversed and left reversed diagonals\n      var xrvs = ex - x < 0 ? -1 : 1;\n      var yrvs = ey - y < 0 ? -1 : 1;\n\n      // Define preferred curve radius\n      var rdef = 35;\n\n      // Reduce curve radius, if source-target x space is smaller\n      var r = Math.abs(ex - x) / 2 < rdef ? Math.abs(ex - x) / 2 : rdef;\n\n      // Further reduce curve radius, is y space is more small\n      r = Math.abs(ey - y) / 2 < r ? Math.abs(ey - y) / 2 : r;\n\n      // Defin width and height of link, excluding radius\n      var h = Math.abs(ey - y) / 2 - r;\n      var w = Math.abs(ex - x) / 2 - r;\n\n      // Build and return custom arc command\n      return \"\\n                  M \".concat(mx, \" \").concat(my, \"\\n                  L \").concat(mx, \" \").concat(y, \"\\n                  L \").concat(x, \" \").concat(y, \"\\n                  L \").concat(x + w * xrvs, \" \").concat(y, \"\\n                  C \").concat(x + w * xrvs + r * xrvs, \" \").concat(y, \" \\n                    \").concat(x + w * xrvs + r * xrvs, \" \").concat(y, \" \\n                    \").concat(x + w * xrvs + r * xrvs, \" \").concat(y + r * yrvs, \"\\n                  L \").concat(x + w * xrvs + r * xrvs, \" \").concat(ey - r * yrvs, \" \\n                  C \").concat(x + w * xrvs + r * xrvs, \"  \").concat(ey, \" \\n                    \").concat(x + w * xrvs + r * xrvs, \"  \").concat(ey, \" \\n                    \").concat(ex - w * xrvs, \"  \").concat(ey, \"\\n                  L \").concat(ex, \" \").concat(ey, \"\\n       \");\n    } // Generate custom diagonal - play with it here - https://observablehq.com/@bumbeishvili/curved-edges\n  }, {\n    key: \"diagonal\",\n    value: function diagonal(s, t, m) {\n      var x = s.x;\n      var y = s.y;\n      var ex = t.x;\n      var ey = t.y;\n      var mx = m && m.x || x;\n      var my = m && m.y || y;\n      var xrvs = ex - x < 0 ? -1 : 1;\n      var yrvs = ey - y < 0 ? -1 : 1;\n      var rdef = 35;\n      var r = Math.abs(ex - x) / 2 < rdef ? Math.abs(ex - x) / 2 : rdef;\n      r = Math.abs(ey - y) / 2 < r ? Math.abs(ey - y) / 2 : r;\n      var h = Math.abs(ey - y) / 2 - r;\n      var w = Math.abs(ex - x) - r * 2;\n      //w=0;\n      var path = \"\\n                  M \".concat(mx, \" \").concat(my, \"\\n                  L \").concat(x, \" \").concat(my, \"\\n                  L \").concat(x, \" \").concat(y, \"\\n                  L \").concat(x, \" \").concat(y + h * yrvs, \"\\n                  C  \").concat(x, \" \").concat(y + h * yrvs + r * yrvs, \" \").concat(x, \" \").concat(y + h * yrvs + r * yrvs, \" \").concat(x + r * xrvs, \" \").concat(y + h * yrvs + r * yrvs, \"\\n                  L \").concat(x + w * xrvs + r * xrvs, \" \").concat(y + h * yrvs + r * yrvs, \"\\n                  C  \").concat(ex, \"  \").concat(y + h * yrvs + r * yrvs, \" \").concat(ex, \"  \").concat(y + h * yrvs + r * yrvs, \" \").concat(ex, \" \").concat(ey - h * yrvs, \"\\n                  L \").concat(ex, \" \").concat(ey, \"\\n       \");\n      return path;\n    }\n  }, {\n    key: \"restyleForeignObjectElements\",\n    value: function restyleForeignObjectElements() {\n      var attrs = this.getChartState();\n      attrs.svg.selectAll(\".node-foreign-object\").attr(\"width\", function (_ref35) {\n        var width = _ref35.width;\n        return width;\n      }).attr(\"height\", function (_ref36) {\n        var height = _ref36.height;\n        return height;\n      }).attr(\"x\", function (_ref37) {\n        var width = _ref37.width;\n        return 0;\n      }).attr(\"y\", function (_ref38) {\n        var height = _ref38.height;\n        return 0;\n      });\n      attrs.svg.selectAll(\".node-foreign-object-div\").style(\"width\", function (_ref39) {\n        var width = _ref39.width;\n        return \"\".concat(width, \"px\");\n      }).style(\"height\", function (_ref40) {\n        var height = _ref40.height;\n        return \"\".concat(height, \"px\");\n      }).html(function (d, i, arr) {\n        return attrs.nodeContent.bind(this)(d, i, arr, attrs);\n      });\n    } // Toggle children on click.\n  }, {\n    key: \"onButtonClick\",\n    value: function onButtonClick(event, d) {\n      var attrs = this.getChartState();\n      if (attrs.setActiveNodeCentered) {\n        d.data._centered = true;\n        d.data._centeredWithDescendants = true;\n      }\n\n      // If childrens are expanded\n      if (d.children) {\n        //Collapse them\n        d._children = d.children;\n        d.children = null;\n\n        // Set descendants expanded property to false\n        this.setExpansionFlagToChildren(d, false);\n      } else {\n        // Expand children\n        d.children = d._children;\n        d._children = null;\n\n        // Set each children as expanded\n        if (d.children) {\n          d.children.forEach(function (_ref41) {\n            var data = _ref41.data;\n            return data._expanded = true;\n          });\n        }\n      }\n\n      // Redraw Graph\n      this.update(d);\n    } // This function changes `expanded` property to descendants\n  }, {\n    key: \"setExpansionFlagToChildren\",\n    value: function setExpansionFlagToChildren(_ref42, flag) {\n      var _this8 = this;\n      var data = _ref42.data,\n        children = _ref42.children,\n        _children = _ref42._children;\n      // Set flag to the current property\n      data._expanded = flag;\n\n      // Loop over and recursively update expanded children's descendants\n      if (children) {\n        children.forEach(function (d) {\n          _this8.setExpansionFlagToChildren(d, flag);\n        });\n      }\n\n      // Loop over and recursively update collapsed children's descendants\n      if (_children) {\n        _children.forEach(function (d) {\n          _this8.setExpansionFlagToChildren(d, flag);\n        });\n      }\n    } // Method which only expands nodes, which have property set \"expanded=true\"\n  }, {\n    key: \"expandSomeNodes\",\n    value: function expandSomeNodes(d) {\n      var _this9 = this;\n      // If node has expanded property set\n      if (d.data._expanded) {\n        // Retrieve node's parent\n        var parent = d.parent;\n\n        // While we can go up\n        while (parent) {\n          // Expand all current parent's children\n          if (parent._children) {\n            parent.children = parent._children;\n          }\n\n          // Replace current parent holding object\n          parent = parent.parent;\n        }\n      }\n\n      // Recursivelly do the same for collapsed nodes\n      if (d._children) {\n        d._children.forEach(function (ch) {\n          return _this9.expandSomeNodes(ch);\n        });\n      }\n\n      // Recursivelly do the same for expanded nodes\n      if (d.children) {\n        d.children.forEach(function (ch) {\n          return _this9.expandSomeNodes(ch);\n        });\n      }\n    } // This function updates nodes state and redraws graph, usually after data change\n  }, {\n    key: \"updateNodesState\",\n    value: function updateNodesState() {\n      var attrs = this.getChartState();\n      this.setLayouts({\n        expandNodesFirst: true\n      });\n\n      // Redraw Graphs\n      this.update(attrs.root);\n    }\n  }, {\n    key: \"setLayouts\",\n    value: function setLayouts(_ref43) {\n      var _this10 = this;\n      var _ref43$expandNodesFir = _ref43.expandNodesFirst,\n        expandNodesFirst = _ref43$expandNodesFir === void 0 ? true : _ref43$expandNodesFir;\n      var attrs = this.getChartState();\n      // Store new root by converting flat data to hierarchy\n      attrs.root = d3.stratify().id(function (d) {\n        return attrs.nodeId(d);\n      }).parentId(function (d) {\n        return attrs.parentNodeId(d);\n      })(attrs.data);\n      attrs.root.each(function (node, i, arr) {\n        var width = attrs.nodeWidth(node);\n        var height = attrs.nodeHeight(node);\n        Object.assign(node, {\n          width: width,\n          height: height\n        });\n      });\n\n      // Store positions, where children appear during their enter animation\n      attrs.root.x0 = 0;\n      attrs.root.y0 = 0;\n      attrs.allNodes = attrs.root.descendants();\n\n      // Store direct and total descendants count\n      attrs.allNodes.forEach(function (d) {\n        Object.assign(d.data, {\n          _directSubordinates: d.children ? d.children.length : 0,\n          _totalSubordinates: d.descendants().length - 1\n        });\n      });\n      if (attrs.root.children) {\n        if (expandNodesFirst) {\n          // Expand all nodes first\n          attrs.root.children.forEach(this.expand);\n        }\n        // Then collapse them all\n        attrs.root.children.forEach(function (d) {\n          return _this10.collapse(d);\n        });\n\n        // Collapse root if level is 0\n        if (attrs.expandLevel == 0) {\n          attrs.root._children = attrs.root.children;\n          attrs.root.children = null;\n        }\n\n        // Then only expand nodes, which have expanded proprty set to true\n        [attrs.root].forEach(function (ch) {\n          return _this10.expandSomeNodes(ch);\n        });\n      }\n    } // Function which collapses passed node and it's descendants\n  }, {\n    key: \"collapse\",\n    value: function collapse(d) {\n      var _this11 = this;\n      if (d.children) {\n        d._children = d.children;\n        d._children.forEach(function (ch) {\n          return _this11.collapse(ch);\n        });\n        d.children = null;\n      }\n    } // Function which expands passed node and it's descendants\n  }, {\n    key: \"expand\",\n    value: function expand(d) {\n      var _this12 = this;\n      if (d._children) {\n        d.children = d._children;\n        d.children.forEach(function (ch) {\n          return _this12.expand(ch);\n        });\n        d._children = null;\n      }\n    } // Zoom handler function\n  }, {\n    key: \"zoomed\",\n    value: function zoomed(event, d) {\n      var attrs = this.getChartState();\n      var chart = attrs.chart;\n\n      // Get d3 event's transform object\n      var transform = event.transform;\n\n      // Store it\n      attrs.lastTransform = transform;\n\n      // Reposition and rescale chart accordingly\n      chart.attr(\"transform\", transform);\n\n      // Apply new styles to the foreign object element\n      if (this.isEdge()) {\n        this.restyleForeignObjectElements();\n      }\n    }\n  }, {\n    key: \"zoomTreeBounds\",\n    value: function zoomTreeBounds(_ref44) {\n      var x0 = _ref44.x0,\n        x1 = _ref44.x1,\n        y0 = _ref44.y0,\n        y1 = _ref44.y1,\n        _ref44$params = _ref44.params,\n        params = _ref44$params === void 0 ? {\n          animate: true,\n          scale: true\n        } : _ref44$params;\n      var _this$getChartState = this.getChartState(),\n        centerG = _this$getChartState.centerG,\n        w = _this$getChartState.svgWidth,\n        h = _this$getChartState.svgHeight,\n        svg = _this$getChartState.svg,\n        zoomBehavior = _this$getChartState.zoomBehavior,\n        duration = _this$getChartState.duration,\n        lastTransform = _this$getChartState.lastTransform;\n      var scaleVal = Math.min(8, 0.9 / Math.max((x1 - x0) / w, (y1 - y0) / h));\n      var identity = d3.zoomIdentity.translate(w / 2, h / 2);\n      identity = identity.scale(params.scale ? scaleVal : lastTransform.k);\n      identity = identity.translate(-(x0 + x1) / 2, -(y0 + y1) / 2);\n      // Transition zoom wrapper component into specified bounds\n      svg.transition().duration(params.animate ? duration : 0).call(zoomBehavior.transform, identity);\n      centerG.transition().duration(params.animate ? duration : 0).attr('transform', 'translate(0,0)');\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var _ref45 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref45$animate = _ref45.animate,\n        animate = _ref45$animate === void 0 ? true : _ref45$animate,\n        nodes = _ref45.nodes,\n        _ref45$scale = _ref45.scale,\n        scale = _ref45$scale === void 0 ? true : _ref45$scale;\n      var attrs = this.getChartState();\n      var root = attrs.root;\n      var descendants = nodes ? nodes : root.descendants();\n      var minX = d3.min(descendants, function (d) {\n        return d.x + attrs.layoutBindings[attrs.layout].nodeLeftX(d);\n      });\n      var maxX = d3.max(descendants, function (d) {\n        return d.x + attrs.layoutBindings[attrs.layout].nodeRightX(d);\n      });\n      var minY = d3.min(descendants, function (d) {\n        return d.y + attrs.layoutBindings[attrs.layout].nodeTopY(d);\n      });\n      var maxY = d3.max(descendants, function (d) {\n        return d.y + attrs.layoutBindings[attrs.layout].nodeBottomY(d);\n      });\n      this.zoomTreeBounds({\n        params: {\n          animate: animate,\n          scale: scale\n        },\n        x0: minX - 50,\n        x1: maxX + 50,\n        y0: minY - 50,\n        y1: maxY + 50\n      });\n      return this;\n    } // This function can be invoked via chart.setExpanded API, it expands or collapses particular node\n  }, {\n    key: \"setExpanded\",\n    value: function setExpanded(id) {\n      var expandedFlag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var attrs = this.getChartState();\n      // Retrieve node by node Id\n      var node = attrs.allNodes.filter(function (_ref46) {\n        var data = _ref46.data;\n        return attrs.nodeId(data) == id;\n      })[0];\n      if (!node) {\n        console.log(\"ORG CHART - \".concat(expandedFlag ? \"EXPAND\" : \"COLLAPSE\", \" - Node with id (\").concat(id, \")  not found in the tree\"));\n        return this;\n      }\n      node.data._expanded = expandedFlag;\n      return this;\n    }\n  }, {\n    key: \"setCentered\",\n    value: function setCentered(nodeId) {\n      var attrs = this.getChartState();\n      // this.setExpanded(nodeId)\n      var node = attrs.allNodes.filter(function (d) {\n        return attrs.nodeId(d.data) === nodeId;\n      })[0];\n      if (!node) {\n        console.log(\"ORG CHART - CENTER - Node with id (\".concat(nodeId, \") not found in the tree\"));\n        return this;\n      }\n      node.data._centered = true;\n      node.data._expanded = true;\n      return this;\n    }\n  }, {\n    key: \"setHighlighted\",\n    value: function setHighlighted(nodeId) {\n      var attrs = this.getChartState();\n      var node = attrs.allNodes.filter(function (d) {\n        return attrs.nodeId(d.data) === nodeId;\n      })[0];\n      if (!node) {\n        console.log(\"ORG CHART - HIGHLIGHT - Node with id (\".concat(nodeId, \")  not found in the tree\"));\n        return this;\n      }\n      node.data._highlighted = true;\n      node.data._expanded = true;\n      node.data._centered = true;\n      return this;\n    }\n  }, {\n    key: \"setUpToTheRootHighlighted\",\n    value: function setUpToTheRootHighlighted(nodeId) {\n      var attrs = this.getChartState();\n      var node = attrs.allNodes.filter(function (d) {\n        return attrs.nodeId(d.data) === nodeId;\n      })[0];\n      if (!node) {\n        console.log(\"ORG CHART - HIGHLIGHTROOT - Node with id (\".concat(nodeId, \") not found in the tree\"));\n        return this;\n      }\n      node.data._upToTheRootHighlighted = true;\n      node.data._expanded = true;\n      node.ancestors().forEach(function (d) {\n        return d.data._upToTheRootHighlighted = true;\n      });\n      return this;\n    }\n  }, {\n    key: \"clearHighlighting\",\n    value: function clearHighlighting() {\n      var attrs = this.getChartState();\n      attrs.allNodes.forEach(function (d) {\n        d.data._highlighted = false;\n        d.data._upToTheRootHighlighted = false;\n      });\n      this.update(attrs.root);\n    } // It can take selector which would go fullscreen\n  }, {\n    key: \"fullscreen\",\n    value: function fullscreen(elem) {\n      var attrs = this.getChartState();\n      var el = d3.select(elem || attrs.container).node();\n      d3.select(document).on('fullscreenchange.' + attrs.id, function (d) {\n        var fsElement = document.fullscreenElement || document.mozFullscreenElement || document.webkitFullscreenElement;\n        if (fsElement == el) {\n          setTimeout(function (d) {\n            attrs.svg.attr('height', window.innerHeight - 40);\n          }, 500);\n        } else {\n          attrs.svg.attr('height', attrs.svgHeight);\n        }\n      });\n      if (el.requestFullscreen) {\n        el.requestFullscreen();\n      } else if (el.mozRequestFullScreen) {\n        el.mozRequestFullScreen();\n      } else if (el.webkitRequestFullscreen) {\n        el.webkitRequestFullscreen();\n      } else if (el.msRequestFullscreen) {\n        el.msRequestFullscreen();\n      }\n    } // Zoom in exposed method\n  }, {\n    key: \"zoomIn\",\n    value: function zoomIn() {\n      var _this$getChartState2 = this.getChartState(),\n        svg = _this$getChartState2.svg,\n        zoomBehavior = _this$getChartState2.zoomBehavior;\n      svg.transition().call(zoomBehavior.scaleBy, 1.3);\n    } // Zoom out exposed method\n  }, {\n    key: \"zoomOut\",\n    value: function zoomOut() {\n      var _this$getChartState3 = this.getChartState(),\n        svg = _this$getChartState3.svg,\n        zoomBehavior = _this$getChartState3.zoomBehavior;\n      svg.transition().call(zoomBehavior.scaleBy, 0.78);\n    }\n  }, {\n    key: \"toDataURL\",\n    value: function toDataURL(url, callback) {\n      var xhr = new XMLHttpRequest();\n      xhr.onload = function () {\n        var reader = new FileReader();\n        reader.onloadend = function () {\n          callback(reader.result);\n        };\n        reader.readAsDataURL(xhr.response);\n      };\n      xhr.open('GET', url);\n      xhr.responseType = 'blob';\n      xhr.send();\n    }\n  }, {\n    key: \"exportImg\",\n    value: function exportImg() {\n      var _ref47 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref47$full = _ref47.full,\n        full = _ref47$full === void 0 ? false : _ref47$full,\n        _ref47$scale = _ref47.scale,\n        scale = _ref47$scale === void 0 ? 3 : _ref47$scale,\n        _ref47$onLoad = _ref47.onLoad,\n        onLoad = _ref47$onLoad === void 0 ? function (d) {\n          return d;\n        } : _ref47$onLoad,\n        _ref47$save = _ref47.save,\n        save = _ref47$save === void 0 ? true : _ref47$save;\n      var that = this;\n      var attrs = this.getChartState();\n      var svgImg = attrs.svg,\n        root = attrs.root;\n      var count = 0;\n      var selection = svgImg.selectAll('img');\n      var total = selection.size();\n      var exportImage = function exportImage() {\n        var transform = JSON.parse(JSON.stringify(that.lastTransform()));\n        var duration = that.duration();\n        if (full) {\n          that.fit();\n        }\n        var _that$getChartState = that.getChartState(),\n          svg = _that$getChartState.svg;\n        setTimeout(function (d) {\n          that.downloadImage({\n            node: svg.node(),\n            scale: scale,\n            isSvg: false,\n            onAlreadySerialized: function onAlreadySerialized(d) {\n              that.update(root);\n            },\n            onLoad: onLoad,\n            save: save\n          });\n        }, full ? duration + 10 : 0);\n      };\n      if (total > 0) {\n        selection.each(function () {\n          var _this13 = this;\n          that.toDataURL(this.src, function (dataUrl) {\n            _this13.src = dataUrl;\n            if (++count == total) {\n              exportImage();\n            }\n          });\n        });\n      } else {\n        exportImage();\n      }\n    }\n  }, {\n    key: \"exportSvg\",\n    value: function exportSvg() {\n      var _this$getChartState4 = this.getChartState(),\n        svg = _this$getChartState4.svg;\n      this.downloadImage({\n        node: svg.node(),\n        scale: 3,\n        isSvg: true\n      });\n      return this;\n    }\n  }, {\n    key: \"expandAll\",\n    value: function expandAll() {\n      var _this$getChartState5 = this.getChartState(),\n        allNodes = _this$getChartState5.allNodes,\n        root = _this$getChartState5.root;\n      allNodes.forEach(function (d) {\n        return d.data._expanded = true;\n      });\n      this.render();\n      return this;\n    }\n  }, {\n    key: \"collapseAll\",\n    value: function collapseAll() {\n      var _this$getChartState6 = this.getChartState(),\n        allNodes = _this$getChartState6.allNodes,\n        root = _this$getChartState6.root;\n      allNodes.forEach(function (d) {\n        return d.data._expanded = false;\n      });\n      this.expandLevel(0);\n      this.render();\n      return this;\n    }\n  }, {\n    key: \"downloadImage\",\n    value: function downloadImage(_ref48) {\n      var node = _ref48.node,\n        _ref48$scale = _ref48.scale,\n        scale = _ref48$scale === void 0 ? 2 : _ref48$scale,\n        _ref48$isSvg = _ref48.isSvg,\n        isSvg = _ref48$isSvg === void 0 ? false : _ref48$isSvg,\n        _ref48$save = _ref48.save,\n        save = _ref48$save === void 0 ? true : _ref48$save,\n        _ref48$onAlreadySeria = _ref48.onAlreadySerialized,\n        onAlreadySerialized = _ref48$onAlreadySeria === void 0 ? function (d) {} : _ref48$onAlreadySeria,\n        _ref48$onLoad = _ref48.onLoad,\n        onLoad = _ref48$onLoad === void 0 ? function (d) {} : _ref48$onLoad;\n      // Retrieve svg node\n      var svgNode = node;\n      if (isSvg) {\n        var source = serializeString(svgNode);\n        //add xml declaration\n        source = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n' + source;\n        //convert svg source to URI data scheme.\n        var url = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(source);\n        saveAs(url, \"graph.svg\");\n        onAlreadySerialized();\n        return;\n      }\n      // Get image quality index (basically,  index you can zoom in)\n      var quality = scale;\n      // Create image\n      var image = document.createElement('img');\n      image.onload = function () {\n        // Create image canvas\n        var canvas = document.createElement('canvas');\n        // Set width and height based on SVG node\n        var rect = svgNode.getBoundingClientRect();\n        canvas.width = rect.width * quality;\n        canvas.height = rect.height * quality;\n        // Draw background\n        var context = canvas.getContext('2d');\n        context.fillStyle = '#FAFAFA';\n        context.fillRect(0, 0, rect.width * quality, rect.height * quality);\n        context.drawImage(image, 0, 0, rect.width * quality, rect.height * quality);\n        // Set some image metadata\n        var dt = canvas.toDataURL('image/png');\n        if (onLoad) {\n          onLoad(dt);\n        }\n        if (save) {\n          // Invoke saving function\n          saveAs(dt, 'graph.png');\n        }\n      };\n      var url = 'data:image/svg+xml; charset=utf8, ' + encodeURIComponent(serializeString(svgNode));\n      onAlreadySerialized();\n      image.src = url; // URL.createObjectURL(blob);\n      // This function invokes save window\n      function saveAs(uri, filename) {\n        // create link\n        var link = document.createElement('a');\n        if (typeof link.download === 'string') {\n          document.body.appendChild(link); // Firefox requires the link to be in the body\n          link.download = filename;\n          link.href = uri;\n          link.click();\n          document.body.removeChild(link); // remove the link when done\n        } else {\n          location.replace(uri);\n        }\n      }\n      // This function serializes SVG and sets all necessary attributes\n      function serializeString(svg) {\n        var xmlns = 'http://www.w3.org/2000/xmlns/';\n        var xlinkns = 'http://www.w3.org/1999/xlink';\n        var svgns = 'http://www.w3.org/2000/svg';\n        svg = svg.cloneNode(true);\n        var fragment = window.location.href + '#';\n        var walker = document.createTreeWalker(svg, NodeFilter.SHOW_ELEMENT, null, false);\n        while (walker.nextNode()) {\n          var _iterator = _createForOfIteratorHelper(walker.currentNode.attributes),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var attr = _step.value;\n              if (attr.value.includes(fragment)) {\n                attr.value = attr.value.replace(fragment, '#');\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n        svg.setAttributeNS(xmlns, 'xmlns', svgns);\n        svg.setAttributeNS(xmlns, 'xmlns:xlink', xlinkns);\n        var serializer = new XMLSerializer();\n        var string = serializer.serializeToString(svg);\n        return string;\n      }\n    } // Calculate what size text will take\n  }, {\n    key: \"getTextWidth\",\n    value: function getTextWidth(text) {\n      var _ref49 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref49$fontSize = _ref49.fontSize,\n        fontSize = _ref49$fontSize === void 0 ? 14 : _ref49$fontSize,\n        _ref49$fontWeight = _ref49.fontWeight,\n        fontWeight = _ref49$fontWeight === void 0 ? 400 : _ref49$fontWeight,\n        _ref49$defaultFont = _ref49.defaultFont,\n        defaultFont = _ref49$defaultFont === void 0 ? \"Helvetice\" : _ref49$defaultFont,\n        ctx = _ref49.ctx;\n      ctx.font = \"\".concat(fontWeight || '', \" \").concat(fontSize, \"px \").concat(defaultFont, \" \");\n      var measurement = ctx.measureText(text);\n      return measurement.width;\n    }\n  }]);\n  return OrgChart;\n}();","map":null,"metadata":{},"sourceType":"module"}