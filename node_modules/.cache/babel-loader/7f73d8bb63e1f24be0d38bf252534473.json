{"ast":null,"code":"import _slicedToArray from \"/Users/prasadedlabadkar/Desktop/code/org-chart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _assertThisInitialized from \"/Users/prasadedlabadkar/Desktop/code/org-chart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"/Users/prasadedlabadkar/Desktop/code/org-chart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/prasadedlabadkar/Desktop/code/org-chart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/prasadedlabadkar/Desktop/code/org-chart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/prasadedlabadkar/Desktop/code/org-chart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/prasadedlabadkar/Desktop/code/org-chart/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { hierarchy } from 'd3-hierarchy';\nimport packageInfo from '../package.json';\nvar version = packageInfo.version;\nvar defaults = Object.freeze({\n  children: function children(data) {\n    return data.children;\n  },\n  nodeSize: function nodeSize(node) {\n    return node.data.size;\n  },\n  spacing: 0\n});\n\n// Create a layout function with customizable options. Per D3-style, the\n// options can be set at any time using setter methods. The layout function\n// will compute the tree node positions based on the options in effect at the\n// time it is called.\nexport default function flextree(options) {\n  var opts = Object.assign({}, defaults, options);\n  function accessor(name) {\n    var opt = opts[name];\n    return typeof opt === 'function' ? opt : function () {\n      return opt;\n    };\n  }\n  function layout(tree) {\n    var wtree = wrap(getWrapper(), tree, function (node) {\n      return node.children;\n    });\n    wtree.update();\n    return wtree.data;\n  }\n  function getFlexNode() {\n    var nodeSize = accessor('nodeSize');\n    var _spacing = accessor('spacing');\n    return /*#__PURE__*/function (_hierarchy$prototype$) {\n      _inherits(FlexNode, _hierarchy$prototype$);\n      function FlexNode(data) {\n        _classCallCheck(this, FlexNode);\n        return _possibleConstructorReturn(this, _getPrototypeOf(FlexNode).call(this, data));\n      }\n      _createClass(FlexNode, [{\n        key: \"copy\",\n        value: function copy() {\n          var c = wrap(this.constructor, this, function (node) {\n            return node.children;\n          });\n          c.each(function (node) {\n            return node.data = node.data.data;\n          });\n          return c;\n        }\n      }, {\n        key: \"spacing\",\n        value: function spacing(oNode) {\n          return _spacing(this, oNode);\n        }\n      }, {\n        key: \"size\",\n        get: function get() {\n          return nodeSize(this);\n        }\n      }, {\n        key: \"nodes\",\n        get: function get() {\n          return this.descendants();\n        }\n      }, {\n        key: \"xSize\",\n        get: function get() {\n          return this.size[0];\n        }\n      }, {\n        key: \"ySize\",\n        get: function get() {\n          return this.size[1];\n        }\n      }, {\n        key: \"top\",\n        get: function get() {\n          return this.y;\n        }\n      }, {\n        key: \"bottom\",\n        get: function get() {\n          return this.y + this.ySize;\n        }\n      }, {\n        key: \"left\",\n        get: function get() {\n          return this.x - this.xSize / 2;\n        }\n      }, {\n        key: \"right\",\n        get: function get() {\n          return this.x + this.xSize / 2;\n        }\n      }, {\n        key: \"root\",\n        get: function get() {\n          var ancs = this.ancestors();\n          return ancs[ancs.length - 1];\n        }\n      }, {\n        key: \"numChildren\",\n        get: function get() {\n          return this.hasChildren ? this.children.length : 0;\n        }\n      }, {\n        key: \"hasChildren\",\n        get: function get() {\n          return !this.noChildren;\n        }\n      }, {\n        key: \"noChildren\",\n        get: function get() {\n          return this.children === null;\n        }\n      }, {\n        key: \"firstChild\",\n        get: function get() {\n          return this.hasChildren ? this.children[0] : null;\n        }\n      }, {\n        key: \"lastChild\",\n        get: function get() {\n          return this.hasChildren ? this.children[this.numChildren - 1] : null;\n        }\n      }, {\n        key: \"extents\",\n        get: function get() {\n          return (this.children || []).reduce(function (acc, kid) {\n            return FlexNode.maxExtents(acc, kid.extents);\n          }, this.nodeExtents);\n        }\n      }, {\n        key: \"nodeExtents\",\n        get: function get() {\n          return {\n            top: this.top,\n            bottom: this.bottom,\n            left: this.left,\n            right: this.right\n          };\n        }\n      }], [{\n        key: \"maxExtents\",\n        value: function maxExtents(e0, e1) {\n          return {\n            top: Math.min(e0.top, e1.top),\n            bottom: Math.max(e0.bottom, e1.bottom),\n            left: Math.min(e0.left, e1.left),\n            right: Math.max(e0.right, e1.right)\n          };\n        }\n      }]);\n      return FlexNode;\n    }(hierarchy.prototype.constructor);\n  }\n  function getWrapper() {\n    var FlexNode = getFlexNode();\n    var nodeSize = accessor('nodeSize');\n    var _spacing2 = accessor('spacing');\n    return /*#__PURE__*/function (_FlexNode) {\n      _inherits(_class, _FlexNode);\n      function _class(data) {\n        var _this;\n        _classCallCheck(this, _class);\n        _this = _possibleConstructorReturn(this, _getPrototypeOf(_class).call(this, data));\n        Object.assign(_assertThisInitialized(_assertThisInitialized(_this)), {\n          x: 0,\n          y: 0,\n          relX: 0,\n          prelim: 0,\n          shift: 0,\n          change: 0,\n          lExt: _assertThisInitialized(_assertThisInitialized(_this)),\n          lExtRelX: 0,\n          lThr: null,\n          rExt: _assertThisInitialized(_assertThisInitialized(_this)),\n          rExtRelX: 0,\n          rThr: null\n        });\n        return _this;\n      }\n      _createClass(_class, [{\n        key: \"spacing\",\n        value: function spacing(oNode) {\n          return _spacing2(this.data, oNode.data);\n        }\n      }, {\n        key: \"update\",\n        value: function update() {\n          layoutChildren(this);\n          resolveX(this);\n          return this;\n        }\n      }, {\n        key: \"size\",\n        get: function get() {\n          return nodeSize(this.data);\n        }\n      }, {\n        key: \"x\",\n        get: function get() {\n          return this.data.x;\n        },\n        set: function set(v) {\n          this.data.x = v;\n        }\n      }, {\n        key: \"y\",\n        get: function get() {\n          return this.data.y;\n        },\n        set: function set(v) {\n          this.data.y = v;\n        }\n      }]);\n      return _class;\n    }(FlexNode);\n  }\n  function wrap(FlexClass, treeData, children) {\n    var _wrap = function _wrap(data, parent) {\n      var node = new FlexClass(data);\n      Object.assign(node, {\n        parent: parent,\n        depth: parent === null ? 0 : parent.depth + 1,\n        height: 0,\n        length: 1\n      });\n      var kidsData = children(data) || [];\n      node.children = kidsData.length === 0 ? null : kidsData.map(function (kd) {\n        return _wrap(kd, node);\n      });\n      if (node.children) {\n        Object.assign(node, node.children.reduce(function (hl, kid) {\n          return {\n            height: Math.max(hl.height, kid.height + 1),\n            length: hl.length + kid.length\n          };\n        }, node));\n      }\n      return node;\n    };\n    return _wrap(treeData, null);\n  }\n  Object.assign(layout, {\n    nodeSize: function nodeSize(arg) {\n      return arguments.length ? (opts.nodeSize = arg, layout) : opts.nodeSize;\n    },\n    spacing: function spacing(arg) {\n      return arguments.length ? (opts.spacing = arg, layout) : opts.spacing;\n    },\n    children: function children(arg) {\n      return arguments.length ? (opts.children = arg, layout) : opts.children;\n    },\n    hierarchy: function hierarchy(treeData, children) {\n      var kids = typeof children === 'undefined' ? opts.children : children;\n      return wrap(getFlexNode(), treeData, kids);\n    },\n    dump: function dump(tree) {\n      var nodeSize = accessor('nodeSize');\n      var _dump = function _dump(i0) {\n        return function (node) {\n          var i1 = i0 + '  ';\n          var i2 = i0 + '    ';\n          var x = node.x,\n            y = node.y;\n          var size = nodeSize(node);\n          var kids = node.children || [];\n          var kdumps = kids.length === 0 ? ' ' : \",\".concat(i1, \"children: [\").concat(i2).concat(kids.map(_dump(i2)).join(i2)).concat(i1, \"],\").concat(i0);\n          return \"{ size: [\".concat(size.join(', '), \"],\").concat(i1, \"x: \").concat(x, \", y: \").concat(y).concat(kdumps, \"},\");\n        };\n      };\n      return _dump('\\n')(tree);\n    }\n  });\n  return layout;\n}\nflextree.version = version;\nvar layoutChildren = function layoutChildren(w) {\n  var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  w.y = y;\n  (w.children || []).reduce(function (acc, kid) {\n    var _acc = _slicedToArray(acc, 2),\n      i = _acc[0],\n      lastLows = _acc[1];\n    layoutChildren(kid, w.y + w.ySize);\n    // The lowest vertical coordinate while extreme nodes still point\n    // in current subtree.\n    var lowY = (i === 0 ? kid.lExt : kid.rExt).bottom;\n    if (i !== 0) separate(w, i, lastLows);\n    var lows = updateLows(lowY, i, lastLows);\n    return [i + 1, lows];\n  }, [0, null]);\n  shiftChange(w);\n  positionRoot(w);\n  return w;\n};\n\n// Resolves the relative coordinate properties - relX and prelim --\n// to set the final, absolute x coordinate for each node. This also sets\n// `prelim` to 0, so that `relX` for each node is its x-coordinate relative\n// to its parent.\nvar resolveX = function resolveX(w, prevSum, parentX) {\n  // A call to resolveX without arguments is assumed to be for the root of\n  // the tree. This will set the root's x-coord to zero.\n  if (typeof prevSum === 'undefined') {\n    prevSum = -w.relX - w.prelim;\n    parentX = 0;\n  }\n  var sum = prevSum + w.relX;\n  w.relX = sum + w.prelim - parentX;\n  w.prelim = 0;\n  w.x = parentX + w.relX;\n  (w.children || []).forEach(function (k) {\n    return resolveX(k, sum, w.x);\n  });\n  return w;\n};\n\n// Process shift and change for all children, to add intermediate spacing to\n// each child's modifier.\nvar shiftChange = function shiftChange(w) {\n  (w.children || []).reduce(function (acc, child) {\n    var _acc2 = _slicedToArray(acc, 2),\n      lastShiftSum = _acc2[0],\n      lastChangeSum = _acc2[1];\n    var shiftSum = lastShiftSum + child.shift;\n    var changeSum = lastChangeSum + shiftSum + child.change;\n    child.relX += changeSum;\n    return [shiftSum, changeSum];\n  }, [0, 0]);\n};\n\n// Separates the latest child from its previous sibling\n/* eslint-disable complexity */\nvar separate = function separate(w, i, lows) {\n  var lSib = w.children[i - 1];\n  var curSubtree = w.children[i];\n  var rContour = lSib;\n  var rSumMods = lSib.relX;\n  var lContour = curSubtree;\n  var lSumMods = curSubtree.relX;\n  var isFirst = true;\n  while (rContour && lContour) {\n    if (rContour.bottom > lows.lowY) lows = lows.next;\n    // How far to the left of the right side of rContour is the left side\n    // of lContour? First compute the center-to-center distance, then add\n    // the \"spacing\"\n    var dist = rSumMods + rContour.prelim - (lSumMods + lContour.prelim) + rContour.xSize / 2 + lContour.xSize / 2 + rContour.spacing(lContour);\n    if (dist > 0 || dist < 0 && isFirst) {\n      lSumMods += dist;\n      // Move subtree by changing relX.\n      moveSubtree(curSubtree, dist);\n      distributeExtra(w, i, lows.index, dist);\n    }\n    isFirst = false;\n    // Advance highest node(s) and sum(s) of modifiers\n    var rightBottom = rContour.bottom;\n    var leftBottom = lContour.bottom;\n    if (rightBottom <= leftBottom) {\n      rContour = nextRContour(rContour);\n      if (rContour) rSumMods += rContour.relX;\n    }\n    if (rightBottom >= leftBottom) {\n      lContour = nextLContour(lContour);\n      if (lContour) lSumMods += lContour.relX;\n    }\n  }\n  // Set threads and update extreme nodes. In the first case, the\n  // current subtree is taller than the left siblings.\n  if (!rContour && lContour) setLThr(w, i, lContour, lSumMods);\n  // In the next case, the left siblings are taller than the current subtree\n  else if (rContour && !lContour) setRThr(w, i, rContour, rSumMods);\n};\n/* eslint-enable complexity */\n\n// Move subtree by changing relX.\nvar moveSubtree = function moveSubtree(subtree, distance) {\n  subtree.relX += distance;\n  subtree.lExtRelX += distance;\n  subtree.rExtRelX += distance;\n};\nvar distributeExtra = function distributeExtra(w, curSubtreeI, leftSibI, dist) {\n  var curSubtree = w.children[curSubtreeI];\n  var n = curSubtreeI - leftSibI;\n  // Are there intermediate children?\n  if (n > 1) {\n    var delta = dist / n;\n    w.children[leftSibI + 1].shift += delta;\n    curSubtree.shift -= delta;\n    curSubtree.change -= dist - delta;\n  }\n};\nvar nextLContour = function nextLContour(w) {\n  return w.hasChildren ? w.firstChild : w.lThr;\n};\nvar nextRContour = function nextRContour(w) {\n  return w.hasChildren ? w.lastChild : w.rThr;\n};\nvar setLThr = function setLThr(w, i, lContour, lSumMods) {\n  var firstChild = w.firstChild;\n  var lExt = firstChild.lExt;\n  var curSubtree = w.children[i];\n  lExt.lThr = lContour;\n  // Change relX so that the sum of modifier after following thread is correct.\n  var diff = lSumMods - lContour.relX - firstChild.lExtRelX;\n  lExt.relX += diff;\n  // Change preliminary x coordinate so that the node does not move.\n  lExt.prelim -= diff;\n  // Update extreme node and its sum of modifiers.\n  firstChild.lExt = curSubtree.lExt;\n  firstChild.lExtRelX = curSubtree.lExtRelX;\n};\n\n// Mirror image of setLThr.\nvar setRThr = function setRThr(w, i, rContour, rSumMods) {\n  var curSubtree = w.children[i];\n  var rExt = curSubtree.rExt;\n  var lSib = w.children[i - 1];\n  rExt.rThr = rContour;\n  var diff = rSumMods - rContour.relX - curSubtree.rExtRelX;\n  rExt.relX += diff;\n  rExt.prelim -= diff;\n  curSubtree.rExt = lSib.rExt;\n  curSubtree.rExtRelX = lSib.rExtRelX;\n};\n\n// Position root between children, taking into account their modifiers\nvar positionRoot = function positionRoot(w) {\n  if (w.hasChildren) {\n    var k0 = w.firstChild;\n    var kf = w.lastChild;\n    var prelim = (k0.prelim + k0.relX - k0.xSize / 2 + kf.relX + kf.prelim + kf.xSize / 2) / 2;\n    Object.assign(w, {\n      prelim: prelim,\n      lExt: k0.lExt,\n      lExtRelX: k0.lExtRelX,\n      rExt: kf.rExt,\n      rExtRelX: kf.rExtRelX\n    });\n  }\n};\n\n// Make/maintain a linked list of the indexes of left siblings and their\n// lowest vertical coordinate.\nvar updateLows = function updateLows(lowY, index, lastLows) {\n  // Remove siblings that are hidden by the new subtree.\n  while (lastLows !== null && lowY >= lastLows.lowY) lastLows = lastLows.next;\n  // Prepend the new subtree.\n  return {\n    lowY: lowY,\n    index: index,\n    next: lastLows\n  };\n};","map":null,"metadata":{},"sourceType":"module"}